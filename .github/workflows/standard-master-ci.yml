# .github/workflows/standard-master-ci.yml
---
name: Standard Master CI

"on":
  workflow_call:
    inputs:
      image_name:
        type: string
        default: 'spring-hello-problem'
      image_registry:
        type: string
        default: 'docker.io'
      chart_path:
        type: string
        default: 'charts/java-app'
      release_name:
        type: string
        default: 'spring-hello-problem'
      namespace:
        type: string
        default: 'spring-hello-problem'
      helm_version:
        type: string
        default: '3.14.4'
      use_kind:
        type: boolean
        default: false
      push_image:
        type: boolean
        default: true
      dockerfile:
        type: string
        default: './Dockerfile'
      context:
        type: string
        default: '.'
    secrets:
      docker_username:
        required: false
      docker_token:
        required: false

permissions:
  contents: read

concurrency:
  group: std-master-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_repo: ${{ steps.meta.outputs.image_repo }}
      image_ref: ${{ steps.meta.outputs.image_ref }}

    steps:
      - uses: actions/checkout@v4

      - name: Prepare image meta
        id: meta
        run: |
          USER="${{ secrets.docker_username }}"
          REG="${{ inputs.image_registry }}"
          NAME="${{ inputs.image_name }}"

          if [ -n "$USER" ]; then
            REPO="$REG/$USER/$NAME"
          else
            if [ "$PUSH" = "true" ]; then
              if [ "$REG" = "docker.io" ]; then
                echo "::error::pushing to docker.io requires secrets.docker_username"
                exit 1
              else
                REPO="$REG/${{ github.repository_owner }}/$NAME"
              fi
            else
              REPO="local/$NAME"
            fi
          fi

          echo "image_repo=$REPO" >> "$GITHUB_OUTPUT"
          echo "image_ref=$REPO:${{ github.sha }}" >> "$GITHUB_OUTPUT"

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        if: ${{ inputs.push_image }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.docker_username }}
          password: ${{ secrets.docker_token }}

      - name: Build and (optionally) push
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          push: ${{ inputs.push_image }}
          tags: ${{ steps.meta.outputs.image_ref }}

  helm-validation:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install kind & kubectl
        if: ${{ inputs.use_kind }}
        shell: bash
        run: |
          # 下载并安装 Kind
          curl -Lo kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

          # 下载并安装 Kubectl
          KVER="$(curl -fsSL https://dl.k8s.io/release/stable.txt)"
          curl -fsSLo kubectl "https://dl.k8s.io/release/${KVER}/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
      
      - name: Create Kind cluster
        if: ${{ inputs.use_kind }}
        run: kind create cluster

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ inputs.helm_version }}

      - name: Helm lint
        run: helm lint ${{ inputs.chart_path }}

      - name: Helm dry-run (render & verify)
        env:
          IMAGE_REPO: ${{ needs.build-and-push.outputs.image_repo }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          helm upgrade --install ${{ inputs.release_name }} ${{ inputs.chart_path }} \
            --dry-run --debug \
            --namespace ${{ inputs.namespace }} \
            --set-string image.repository="$IMAGE_REPO" \
            --set-string image.tag="$IMAGE_TAG"
